C L "main" 0 16 1 "FUNCTION"
D G "__PCH__" 0 57 ""5.059""
D G "__DEVICE__" 0 57 "4550"
D G "__DATE__" 0 57 ""08-may.-24""
D G "__TIME__" 0 57 ""00:17:03""
D G "_UNICODE" 0 57 ""?""
D G "__EVAL" 0 57 ""?"" "Standard Header file for the PIC18F4550 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 45 ""
v L "value" 1 45 "int8" `54 
f B "set_tris_a" 1 45 "void(int8 value)" `53 
f N "set_tris_b" 1 46 ""
v L "value" 1 46 "int8" `56 
f B "set_tris_b" 1 46 "void(int8 value)" `55 
f N "set_tris_c" 1 47 ""
v L "value" 1 47 "int8" `58 
f B "set_tris_c" 1 47 "void(int8 value)" `57 
f N "set_tris_d" 1 48 ""
v L "value" 1 48 "int8" `60 
f B "set_tris_d" 1 48 "void(int8 value)" `59 
f N "set_tris_e" 1 49 ""
v L "value" 1 49 "int8" `62 
f B "set_tris_e" 1 49 "void(int8 value)" `61 
f N "get_tris_a" 1 50 ""
f B "get_tris_a" 1 50 "int8()" `63 
f N "get_tris_b" 1 51 ""
f B "get_tris_b" 1 51 "int8()" `64 
f N "get_tris_c" 1 52 ""
f B "get_tris_c" 1 52 "int8()" `65 
f N "get_tris_d" 1 53 ""
f B "get_tris_d" 1 53 "int8()" `66 
f N "get_tris_e" 1 54 ""
f B "get_tris_e" 1 54 "int8()" `67 
f N "output_a" 1 55 ""
v L "value" 1 55 "int8" `69 
f B "output_a" 1 55 "void(int8 value)" `68 
f N "output_b" 1 56 ""
v L "value" 1 56 "int8" `71 
f B "output_b" 1 56 "void(int8 value)" `70 
f N "output_c" 1 57 ""
v L "value" 1 57 "int8" `73 
f B "output_c" 1 57 "void(int8 value)" `72 
f N "output_d" 1 58 ""
v L "value" 1 58 "int8" `75 
f B "output_d" 1 58 "void(int8 value)" `74 
f N "output_e" 1 59 ""
v L "value" 1 59 "int8" `77 
f B "output_e" 1 59 "void(int8 value)" `76 
f N "input_a" 1 60 ""
f B "input_a" 1 60 "int8()" `78 
f N "input_b" 1 61 ""
f B "input_b" 1 61 "int8()" `79 
f N "input_c" 1 62 ""
f B "input_c" 1 62 "int8()" `80 
f N "input_d" 1 63 ""
f B "input_d" 1 63 "int8()" `81 
f N "input_e" 1 64 ""
f B "input_e" 1 64 "int8()" `82 
f N "input_change_a" 1 65 ""
f B "input_change_a" 1 65 "int8()" `83 
f N "input_change_b" 1 66 ""
f B "input_change_b" 1 66 "int8()" `84 
f N "input_change_c" 1 67 ""
f B "input_change_c" 1 67 "int8()" `85 
f N "input_change_d" 1 68 ""
f B "input_change_d" 1 68 "int8()" `86 
f N "input_change_e" 1 69 ""
f B "input_change_e" 1 69 "int8()" `87 
f N "input" 1 70 ""
v L "pin" 1 70 "int16" `89 
f B "input" 1 70 "int8(int16 pin)" `88 
f N "input_state" 1 71 ""
v L "pin" 1 71 "int16" `91 
f B "input_state" 1 71 "int8(int16 pin)" `90 
f N "output_low" 1 72 ""
v L "pin" 1 72 "int16" `93 
f B "output_low" 1 72 "void(int16 pin)" `92 
f N "output_high" 1 73 ""
v L "pin" 1 73 "int16" `95 
f B "output_high" 1 73 "void(int16 pin)" `94 
f N "output_toggle" 1 74 ""
v L "pin" 1 74 "int16" `97 
f B "output_toggle" 1 74 "void(int16 pin)" `96 
f N "output_bit" 1 75 ""
v L "pin" 1 75 "int16" `99 
v L "level" 1 75 "int8" `100 
f B "output_bit" 1 75 "void(int16 pin,int8 level)" `98 
f N "output_float" 1 76 ""
v L "pin" 1 76 "int16" `102 
f B "output_float" 1 76 "void(int16 pin)" `101 
f N "output_drive" 1 77 ""
v L "pin" 1 77 "int16" `104 
f B "output_drive" 1 77 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 81 "31744"
d G "PIN_A1" 1 82 "31745"
d G "PIN_A2" 1 83 "31746"
d G "PIN_A3" 1 84 "31747"
d G "PIN_A4" 1 85 "31748"
d G "PIN_A5" 1 86 "31749"
d G "PIN_A6" 1 87 "31750"
d G "PIN_B0" 1 89 "31752"
d G "PIN_B1" 1 90 "31753"
d G "PIN_B2" 1 91 "31754"
d G "PIN_B3" 1 92 "31755"
d G "PIN_B4" 1 93 "31756"
d G "PIN_B5" 1 94 "31757"
d G "PIN_B6" 1 95 "31758"
d G "PIN_B7" 1 96 "31759"
d G "PIN_C0" 1 98 "31760"
d G "PIN_C1" 1 99 "31761"
d G "PIN_C2" 1 100 "31762"
d G "PIN_C4" 1 101 "31764"
d G "PIN_C5" 1 102 "31765"
d G "PIN_C6" 1 103 "31766"
d G "PIN_C7" 1 104 "31767"
d G "PIN_D0" 1 106 "31768"
d G "PIN_D1" 1 107 "31769"
d G "PIN_D2" 1 108 "31770"
d G "PIN_D3" 1 109 "31771"
d G "PIN_D4" 1 110 "31772"
d G "PIN_D5" 1 111 "31773"
d G "PIN_D6" 1 112 "31774"
d G "PIN_D7" 1 113 "31775"
d G "PIN_E0" 1 115 "31776"
d G "PIN_E1" 1 116 "31777"
d G "PIN_E2" 1 117 "31778"
d G "PIN_E3" 1 118 "31779"
d G "PIN_E7" 1 119 "31783"
d G "FALSE" 1 122 "0"
d G "TRUE" 1 123 "1"
d G "BYTE" 1 125 "int8"
d G "BOOLEAN" 1 126 "int1"
d G "getc" 1 128 "getch"
d G "fgetc" 1 129 "getch"
d G "getchar" 1 130 "getch"
d G "putc" 1 131 "putchar"
d G "fputc" 1 132 "putchar"
d G "fgets" 1 133 "gets"
d G "fputs" 1 134 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 139 ""
f B "restart_cause" 1 139 "int8()" `105 
f N "reset_cpu" 1 140 ""
f B "reset_cpu" 1 140 "void()" `106 
f N "sleep" 1 141 ""
f B "sleep" 1 141 "void()" `107 
f N "sleep" 1 142 ""
v L "type" 1 142 "int8" `109 
f B "sleep" 1 142 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 144 "7"
d G "MCLR_FROM_SLEEP" 1 145 "11"
d G "MCLR_FROM_RUN" 1 146 "15"
d G "NORMAL_POWER_UP" 1 147 "12"
d G "BROWNOUT_RESTART" 1 148 "14"
d G "WDT_FROM_SLEEP" 1 149 "3"
d G "RESET_INSTRUCTION" 1 150 "0"
d G "SLEEP_FULL" 1 153 "0" "Default"
d G "SLEEP_IDLE" 1 154 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 161 ""
v L "mode" 1 161 "int8" `111 
f B "setup_timer_0" 1 161 "void(int8 mode)" `110 
f N "set_timer0" 1 162 ""
v L "value" 1 162 "int16" `113 
f B "set_timer0" 1 162 "void(int16 value)" `112 
f N "get_timer0" 1 163 ""
f B "get_timer0" 1 163 "int16()" `114 
f N "setup_counters" 1 164 ""
v L "mode" 1 164 "int8" `116 
v L "prescaler" 1 164 "int8" `117 
f B "setup_counters" 1 164 "void(int8 mode,int8 prescaler)" `115 
f N "set_rtcc" 1 165 ""
v L "value" 1 165 "int16" `119 
f B "set_rtcc" 1 165 "void(int16 value)" `118 
f N "get_rtcc" 1 166 ""
f B "get_rtcc" 1 166 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 168 "0"
d G "T0_EXT_L_TO_H" 1 169 "32"
d G "T0_EXT_H_TO_L" 1 170 "48"
d G "T0_DIV_1" 1 172 "8"
d G "T0_DIV_2" 1 173 "0"
d G "T0_DIV_4" 1 174 "1"
d G "T0_DIV_8" 1 175 "2"
d G "T0_DIV_16" 1 176 "3"
d G "T0_DIV_32" 1 177 "4"
d G "T0_DIV_64" 1 178 "5"
d G "T0_DIV_128" 1 179 "6"
d G "T0_DIV_256" 1 180 "7"
d G "T0_OFF" 1 182 "0x80"
d G "T0_8_BIT" 1 184 "0x40"
d G "RTCC_INTERNAL" 1 186 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 187 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 188 "48"
d G "RTCC_DIV_1" 1 189 "8"
d G "RTCC_DIV_2" 1 190 "0"
d G "RTCC_DIV_4" 1 191 "1"
d G "RTCC_DIV_8" 1 192 "2"
d G "RTCC_DIV_16" 1 193 "3"
d G "RTCC_DIV_32" 1 194 "4"
d G "RTCC_DIV_64" 1 195 "5"
d G "RTCC_DIV_128" 1 196 "6"
d G "RTCC_DIV_256" 1 197 "7"
d G "RTCC_OFF" 1 198 "0x80"
d G "RTCC_8_BIT" 1 199 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 210 ""
v L "mode" 1 210 "int16" `122 
f B "setup_wdt" 1 210 "void(int16 mode)" `121 
f N "restart_wdt" 1 211 ""
f B "restart_wdt" 1 211 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 213 "0x100"
d G "WDT_OFF" 1 214 "0"
d G "WDT_4MS" 1 216 "0x300"
d G "WDT_8MS" 1 217 "0x500"
d G "WDT_16MS" 1 218 "0x700"
d G "WDT_32MS" 1 219 "0x900"
d G "WDT_64MS" 1 220 "0xB00"
d G "WDT_128MS" 1 221 "0xD00"
d G "WDT_256MS" 1 222 "0xF00"
d G "WDT_512MS" 1 223 "0x1100"
d G "WDT_1S" 1 224 "0x1300"
d G "WDT_2S" 1 225 "0x1500"
d G "WDT_4S" 1 226 "0x1700"
d G "WDT_8S" 1 227 "0x1900"
d G "WDT_16" 1 228 "0x1B00"
d G "WDT_32S" 1 229 "0x1D00"
d G "WDT_64S" 1 230 "0x1F00"
d G "WDT_128S" 1 231 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 237 ""
v L "mode" 1 237 "int16" `125 
f B "setup_timer_1" 1 237 "void(int16 mode)" `124 
f N "get_timer1" 1 238 ""
f B "get_timer1" 1 238 "int16()" `126 
f N "set_timer1" 1 239 ""
v L "value" 1 239 "int16" `128 
f B "set_timer1" 1 239 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 242 "0"
d G "T1_INTERNAL" 1 243 "0x85"
d G "T1_EXTERNAL" 1 244 "0x87"
d G "T1_EXTERNAL_SYNC" 1 245 "0x83"
d G "T1_CLK_OUT" 1 247 "8"
d G "T1_DIV_BY_1" 1 249 "0"
d G "T1_DIV_BY_2" 1 250 "0x10"
d G "T1_DIV_BY_4" 1 251 "0x20"
d G "T1_DIV_BY_8" 1 252 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 257 ""
v L "mode" 1 257 "int8" `130 
v L "period" 1 257 "int8" `131 
v L "postscale" 1 257 "int8" `132 
f B "setup_timer_2" 1 257 "void(int8 mode,int8 period,int8 postscale)" `129 
f N "get_timer2" 1 258 ""
f B "get_timer2" 1 258 "int8()" `133 
f N "set_timer2" 1 259 ""
v L "value" 1 259 "int8" `135 
f B "set_timer2" 1 259 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 261 "0"
d G "T2_DIV_BY_1" 1 262 "4"
d G "T2_DIV_BY_4" 1 263 "5"
d G "T2_DIV_BY_16" 1 264 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 269 ""
v L "mode" 1 269 "int16" `137 
f B "setup_timer_3" 1 269 "void(int16 mode)" `136 
f N "get_timer3" 1 270 ""
f B "get_timer3" 1 270 "int16()" `138 
f N "set_timer3" 1 271 ""
v L "value" 1 271 "int16" `140 
f B "set_timer3" 1 271 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 274 "0"
d G "T3_INTERNAL" 1 275 "0x85"
d G "T3_EXTERNAL" 1 276 "0x87"
d G "T3_EXTERNAL_SYNC" 1 277 "0x83"
d G "T3_DIV_BY_1" 1 279 "0"
d G "T3_DIV_BY_2" 1 280 "0x10"
d G "T3_DIV_BY_4" 1 281 "0x20"
d G "T3_DIV_BY_8" 1 282 "0x30"
c L "set_timer3" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 288 ""
v L "mode" 1 288 "int32" `142 
f B "setup_ccp1" 1 288 "void(int32 mode)" `141 
f N "setup_ccp1" 1 289 ""
v L "mode" 1 289 "int32" `144 
v L "pwm" 1 289 "int8" `145 
f B "setup_ccp1" 1 289 "void(int32 mode,int8 pwm)" `143 
f N "set_pwm1_duty" 1 290 ""
v L "value" 1 290 "int16" `147 
f B "set_pwm1_duty" 1 290 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 292 "0"
d G "CCP_CAPTURE_FE" 1 293 "4"
d G "CCP_CAPTURE_RE" 1 294 "5"
d G "CCP_CAPTURE_DIV_4" 1 295 "6"
d G "CCP_CAPTURE_DIV_16" 1 296 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 297 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 298 "9"
d G "CCP_COMPARE_INT" 1 299 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 300 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 301 "0xB"
d G "CCP_PWM" 1 302 "0xC"
d G "CCP_PWM_PLUS_1" 1 303 "0x1c"
d G "CCP_PWM_PLUS_2" 1 304 "0x2c"
d G "CCP_PWM_PLUS_3" 1 305 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 311 "0x48"
d G "T3_CCP2" 1 312 "0x8"
d G "CCP_PWM_H_H" 1 315 "0x0c"
d G "CCP_PWM_H_L" 1 316 "0x0d"
d G "CCP_PWM_L_H" 1 317 "0x0e"
d G "CCP_PWM_L_L" 1 318 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 320 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 321 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 322 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 324 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 325 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 326 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 327 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 328 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 329 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 330 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 332 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 333 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 334 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 336 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 337 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 338 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 340 "0x80000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 344 ""
v L "mode" 1 344 "int32" `152 
f B "setup_ccp2" 1 344 "void(int32 mode)" `151 
f N "setup_ccp2" 1 345 ""
v L "mode" 1 345 "int32" `154 
v L "pwm" 1 345 "int8" `155 
f B "setup_ccp2" 1 345 "void(int32 mode,int8 pwm)" `153 
f N "set_pwm2_duty" 1 346 ""
v L "value" 1 346 "int16" `157 
f B "set_pwm2_duty" 1 346 "void(int16 value)" `156 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
f N "setup_psp" 1 355 ""
v L "mode" 1 355 "int8" `162 
f B "setup_psp" 1 355 "void(int8 mode)" `161 
f N "psp_output_full" 1 356 ""
f B "psp_output_full" 1 356 "int8()" `163 
f N "psp_input_full" 1 357 ""
f B "psp_input_full" 1 357 "int8()" `164 
f N "psp_overflow" 1 358 ""
f B "psp_overflow" 1 358 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 360 "0x10"
d G "PSP_DISABLED" 1 361 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
f N "setup_spi" 1 368 ""
v L "mode" 1 368 "int32" `168 
f B "setup_spi" 1 368 "void(int32 mode)" `167 
f N "spi_write" 1 369 ""
v L "value" 1 369 "int8" `170 
f B "spi_write" 1 369 "void(int8 value)" `169 
f N "spi_read" 1 370 ""
f B "spi_read" 1 370 "int8()" `171 
f N "spi_read" 1 371 ""
v L "value" 1 371 "int8" `173 
f B "spi_read" 1 371 "int8(int8 value)" `172 
f N "spi_data_in" 1 372 ""
f B "spi_data_in" 1 372 "int8()" `174 
f N "setup_spi2" 1 373 ""
v L "mode" 1 373 "int32" `176 
f B "setup_spi2" 1 373 "void(int32 mode)" `175 
f N "spi_write2" 1 374 ""
v L "value" 1 374 "int8" `178 
f B "spi_write2" 1 374 "void(int8 value)" `177 
f N "spi_read2" 1 375 ""
f B "spi_read2" 1 375 "int8()" `179 
f N "spi_read2" 1 376 ""
v L "value" 1 376 "int8" `181 
f B "spi_read2" 1 376 "int8(int8 value)" `180 
f N "spi_data_in2" 1 377 ""
f B "spi_data_in2" 1 377 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 379 "0x00"
d G "SPI_MASTER" 1 380 "0x20"
d G "SPI_SLAVE" 1 381 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 382 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 383 "0x00"
d G "SPI_CLK_DIV_4" 1 384 "0x00"
d G "SPI_CLK_DIV_16" 1 385 "0x01"
d G "SPI_CLK_DIV_64" 1 386 "0x02"
d G "SPI_CLK_T2" 1 387 "0x03"
d G "SPI_SS_DISABLED" 1 388 "0x01"
d G "SPI_XMIT_L_TO_H" 1 390 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 391 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 393 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 394 "0x8000"
d G "SPI_L_TO_H" 1 397 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 398 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 402 ""
v L "baud" 1 402 "int32" `184 
f B "setup_uart" 1 402 "void(int32 baud)" `183 
f N "setup_uart" 1 403 ""
v L "baud" 1 403 "int32" `186 
v L "stream" 1 403 "int8" `187 
f B "setup_uart" 1 403 "void(int32 baud,int8 stream)" `185 
f N "setup_uart" 1 404 ""
v L "baud" 1 404 "int32" `189 
v L "stream" 1 404 "int8" `190 
v L "clock" 1 404 "int32" `191 
f B "setup_uart" 1 404 "void(int32 baud,int8 stream,int32 clock)" `188 
f N "set_uart_speed" 1 405 ""
v L "baud" 1 405 "int32" `193 
f B "set_uart_speed" 1 405 "void(int32 baud)" `192 
f N "set_uart_speed" 1 406 ""
v L "baud" 1 406 "int32" `195 
v L "stream" 1 406 "int8" `196 
f B "set_uart_speed" 1 406 "void(int32 baud,int8 stream)" `194 
f N "set_uart_speed" 1 407 ""
v L "baud" 1 407 "int32" `198 
v L "stream" 1 407 "int8" `199 
v L "clock" 1 407 "int32" `200 
f B "set_uart_speed" 1 407 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 411 "2"
d G "UART_DATA" 1 412 "4"
d G "UART_AUTODETECT" 1 413 "8"
d G "UART_AUTODETECT_NOWAIT" 1 414 "9"
d G "UART_WAKEUP_ON_RDA" 1 415 "10"
d G "UART_SEND_BREAK" 1 416 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 420 ""
v L "mode" 1 420 "int32" `202 
f B "setup_comparator" 1 420 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 422 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 423 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 424 "0xbcf05"
d G "NC_NC_NC_NC" 1 425 "0x0ff07"
d G "A0_A3_A1_A2" 1 426 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 427 "0x9ef01"
d G "A0_VR_A1_VR" 1 428 "0x3ff06"
d G "A3_VR_A2_VR" 1 429 "0xcff0e"
d G "CP1_INVERT" 1 430 "0x0000010"
d G "CP2_INVERT" 1 431 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 438 ""
v L "mode" 1 438 "int8" `206 
f B "setup_vref" 1 438 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 440 "0xa0"
d G "VREF_HIGH" 1 441 "0x80"
d G "VREF_F5" 1 443 "0x40"
d G "VREF_COMP" 1 444 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_low_volt_detect" 1 448 ""
v L "mode" 1 448 "int8" `208 
f B "setup_low_volt_detect" 1 448 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 450 "0x1F"
d G "LVD_45" 1 451 "0x1E"
d G "LVD_42" 1 452 "0x1D"
d G "LVD_40" 1 453 "0x1C"
d G "LVD_38" 1 454 "0x1B"
d G "LVD_36" 1 455 "0x1A"
d G "LVD_35" 1 456 "0x19"
d G "LVD_33" 1 457 "0x18"
d G "LVD_30" 1 458 "0x17"
d G "LVD_28" 1 459 "0x16"
d G "LVD_27" 1 460 "0x15"
d G "LVD_25" 1 461 "0x14"
d G "LVD_24" 1 462 "0x13"
d G "LVD_23" 1 463 "0x12"
d G "LVD_22" 1 464 "0x11"
d G "LVD_21" 1 465 "0x10"
d G "LVD_TRIGGER_BELOW" 1 467 "0"
d G "LVD_TRIGGER_ABOVE" 1 468 "0x80"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 473 ""
v L "mode" 1 473 "int16" `210 
f B "setup_oscillator" 1 473 "int8(int16 mode)" `209 
f N "setup_oscillator" 1 474 ""
v L "mode" 1 474 "int16" `212 
v L "tune" 1 474 "sint8" `213 
f B "setup_oscillator" 1 474 "int8(int16 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 477 "0"
d G "OSC_125KHZ" 1 478 "0x10"
d G "OSC_250KHZ" 1 479 "0x20"
d G "OSC_500KHZ" 1 480 "0x30"
d G "OSC_1MHZ" 1 481 "0x40"
d G "OSC_2MHZ" 1 482 "0x50"
d G "OSC_4MHZ" 1 483 "0x60"
d G "OSC_8MHZ" 1 484 "0x70"
d G "OSC_TIMER1" 1 486 "1"
d G "OSC_INTRC" 1 487 "2"
d G "OSC_NORMAL" 1 488 "0"
d G "OSC_IDLE_MODE" 1 490 "0x80"
d G "OSC_31250" 1 491 "0x8000"
d G "OSC_STATE_STABLE" 1 495 "4"
d G "OSC_STATE_EXT_RUNNING" 1 496 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 503 ""
v L "mode" 1 503 "int16" `215 
f B "setup_adc" 1 503 "void(int16 mode)" `214 
f N "read_adc" 1 504 ""
f B "read_adc" 1 504 "int8()" `216 
f N "read_adc" 1 505 ""
v L "mode" 1 505 "int8" `218 
f B "read_adc" 1 505 "int8(int8 mode)" `217 
f N "read_adc" 1 506 ""
f G "read_adc" 1 506 "int16()" `219 
f N "read_adc" 1 507 ""
v L "mode" 1 507 "int8" `220 
f G "read_adc" 1 507 "int16(int8 mode,int8 pins)" `219 
f N "adc_done" 1 508 ""
f B "adc_done" 1 508 "int8(int8 mode,int8 pins)" `219  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 510 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 511 "0x100"
d G "ADC_CLOCK_DIV_4" 1 512 "0x04"
d G "ADC_CLOCK_DIV_8" 1 513 "0x01"
d G "ADC_CLOCK_DIV_16" 1 514 "0x05"
d G "ADC_CLOCK_DIV_32" 1 515 "0x02"
d G "ADC_CLOCK_DIV_64" 1 516 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 517 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 519 "0x00"
d G "ADC_TAD_MUL_2" 1 520 "0x08"
d G "ADC_TAD_MUL_4" 1 521 "0x10"
d G "ADC_TAD_MUL_6" 1 522 "0x18"
d G "ADC_TAD_MUL_8" 1 523 "0x20"
d G "ADC_TAD_MUL_12" 1 524 "0x28"
d G "ADC_TAD_MUL_16" 1 525 "0x30"
d G "ADC_TAD_MUL_20" 1 526 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 529 ""
v L "pins" 1 529 "int8" `221 
f B "setup_adc_ports" 1 529 "void(int8 pins)" `220 
f N "setup_adc_ports" 1 530 ""
v L "pins" 1 530 "int8" `223 
v L "reference" 1 530 "int8" `224 
f B "setup_adc_ports" 1 530 "void(int8 pins,int8 reference)" `222 
f N "set_adc_channel" 1 531 ""
v L "channel" 1 531 "int8" `226 
f B "set_adc_channel" 1 531 "void(int8 channel)" `225  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 534 "0x0F" "None"
d G "ALL_ANALOG" 1 535 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 536 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 537 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 538 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 539 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 540 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 541 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 542 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 543 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 544 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 545 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 546 "0x0D" "A0 A1"
d G "AN0" 1 547 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 548 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 549 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 550 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 551 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 552 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 553 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 554 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 555 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 556 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 557 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 558 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 559 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 562 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 563 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 564 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 565 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 568 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 569 "1"
d G "ADC_READ_ONLY" 1 570 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 576 ""
v L "x" 1 576 "sint8" `228 
f B "abs" 1 576 "sint8(sint8 x)" `227 
f N "abs" 1 577 ""
v L "x" 1 577 "sint16" `230 
f B "abs" 1 577 "sint16(sint16 x)" `229 
f N "abs" 1 578 ""
v L "x" 1 578 "sint32" `232 
f B "abs" 1 578 "sint32(sint32 x)" `231 
f N "abs" 1 579 ""
v L "x" 1 579 "float" `234 
f B "abs" 1 579 "float(float x)" `233 
f N "_mul" 1 580 ""
v L "??65535" 1 580 "int8" `236 
v L "??65535" 1 580 "int8" `237 
f B "_mul" 1 580 "int16(int8 ,int8 )" `235 
f N "_mul" 1 581 ""
v L "??65535" 1 581 "sint8" `239 
v L "??65535" 1 581 "sint8" `240 
f B "_mul" 1 581 "sint16(sint8 ,sint8 )" `238 
f N "_mul" 1 582 ""
v L "??65535" 1 582 "int16" `242 
v L "??65535" 1 582 "int16" `243 
f B "_mul" 1 582 "int32(int16 ,int16 )" `241 
f N "_mul" 1 583 ""
v L "??65535" 1 583 "sint16" `245 
v L "??65535" 1 583 "sint16" `246 
f B "_mul" 1 583 "sint32(sint16 ,sint16 )" `244  "Memory Manipulation Prototypes:"
f N "read_bank" 1 586 ""
v L "bank" 1 586 "int8" `248 
v L "offset" 1 586 "int8" `249 
f B "read_bank" 1 586 "int8(int8 bank,int8 offset)" `247 
f N "write_bank" 1 587 ""
v L "bank" 1 587 "int8" `251 
v L "offset" 1 587 "int8" `252 
v L "value" 1 587 "int8" `253 
f B "write_bank" 1 587 "void(int8 bank,int8 offset,int8 value)" `250 
f N "strcpy" 1 588 ""
v L "dest" 1 588 "*int8" `255 
v L "src" 1 588 "*int8" `256 
f B "strcpy" 1 588 "void(*int8 dest,*int8 src)" `254 
f N "strcopy" 1 589 ""
v L "dest" 1 589 "*int8" `258 
v L "src" 1 589 "*int8" `259 
f B "strcopy" 1 589 "void(*int8 dest,*int8 src)" `257 
f N "memset" 1 590 ""
v L "destination" 1 590 "*int8" `261 
v L "value" 1 590 "int8" `262 
v L "num" 1 590 "int16" `263 
f B "memset" 1 590 "void(*int8 destination,int8 value,int16 num)" `260 
f N "memcpy" 1 591 ""
v L "destination" 1 591 "*int8" `265 
v L "source" 1 591 "*int8" `266 
v L "num" 1 591 "int16" `267 
f B "memcpy" 1 591 "void(*int8 destination,*int8 source,int16 num)" `264  "String Prototypes:"
f N "toupper" 1 594 ""
v L "cvalue" 1 594 "int8" `269 
f B "toupper" 1 594 "int8(int8 cvalue)" `268 
f N "tolower" 1 595 ""
v L "cvalue" 1 595 "int8" `271 
f B "tolower" 1 595 "int8(int8 cvalue)" `270 
f N "sprintf" 1 596 ""
v L "string" 1 596 "*int8" `273 
v L "cstring" 1 596 "*int8" `274 
f B "sprintf" 1 596 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `272  "Data Manipulators Prototypes:"
f N "shift_left" 1 599 ""
v L "address" 1 599 "*int8" `277 
v L "bytes" 1 599 "int8" `278 
v L "value" 1 599 "int8" `279 
f B "shift_left" 1 599 "int8(*int8 address,int8 bytes,int8 value)" `276 
f N "shift_right" 1 600 ""
v L "address" 1 600 "*int8" `281 
v L "bytes" 1 600 "int8" `282 
v L "value" 1 600 "int8" `283 
f B "shift_right" 1 600 "int8(*int8 address,int8 bytes,int8 value)" `280 
f N "rotate_left" 1 601 ""
v L "address" 1 601 "*int8" `285 
v L "bytes" 1 601 "int8" `286 
f B "rotate_left" 1 601 "void(*int8 address,int8 bytes)" `284 
f N "rotate_right" 1 602 ""
v L "address" 1 602 "*int8" `288 
v L "bytes" 1 602 "int8" `289 
f B "rotate_right" 1 602 "void(*int8 address,int8 bytes)" `287 
f N "swap" 1 603 ""
v L "value" 1 603 "int8" `291 
f B "swap" 1 603 "void(int8 value)" `290 
f N "make8" 1 604 ""
v L "var" 1 604 "int16" `293 
v L "offset" 1 604 "int8" `294 
f B "make8" 1 604 "int8(int16 var,int8 offset)" `292 
f N "make8" 1 605 ""
v L "var" 1 605 "int32" `296 
v L "offset" 1 605 "int8" `297 
f B "make8" 1 605 "int8(int32 var,int8 offset)" `295 
f N "make16" 1 606 ""
v L "varhigh" 1 606 "int8" `299 
v L "varlow" 1 606 "int8" `300 
f B "make16" 1 606 "int16(int8 varhigh,int8 varlow)" `298 
f N "make32" 1 607 ""
v L "var1" 1 607 "int16" `302 
f B "make32" 1 607 "int32(int16 var1)" `301 
f N "make32" 1 608 ""
v L "var1" 1 608 "int16" `304 
v L "var2" 1 608 "int16" `305 
f B "make32" 1 608 "int32(int16 var1,int16 var2)" `303 
f N "make32" 1 609 ""
v L "var1" 1 609 "int16" `307 
v L "var2" 1 609 "int8" `308 
f B "make32" 1 609 "int32(int16 var1,int8 var2)" `306 
f N "make32" 1 610 ""
v L "var1" 1 610 "int16" `310 
v L "var2" 1 610 "int8" `311 
v L "var3" 1 610 "int8" `312 
f B "make32" 1 610 "int32(int16 var1,int8 var2,int8 var3)" `309 
f N "make32" 1 611 ""
v L "var1" 1 611 "int8" `314 
f B "make32" 1 611 "int32(int8 var1)" `313 
f N "make32" 1 612 ""
v L "var1" 1 612 "int8" `316 
v L "var2" 1 612 "int8" `317 
f B "make32" 1 612 "int32(int8 var1,int8 var2)" `315 
f N "make32" 1 613 ""
v L "var1" 1 613 "int8" `319 
v L "var2" 1 613 "int8" `320 
v L "var3" 1 613 "int8" `321 
f B "make32" 1 613 "int32(int8 var1,int8 var2,int8 var3)" `318 
f N "make32" 1 614 ""
v L "var1" 1 614 "int8" `323 
v L "var2" 1 614 "int8" `324 
v L "var3" 1 614 "int8" `325 
v L "var4" 1 614 "int8" `326 
f B "make32" 1 614 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `322 
f N "make32" 1 615 ""
v L "var1" 1 615 "int8" `328 
v L "var2" 1 615 "int16" `329 
f B "make32" 1 615 "int32(int8 var1,int16 var2)" `327 
f N "make32" 1 616 ""
v L "var1" 1 616 "int8" `331 
v L "var2" 1 616 "int16" `332 
v L "var3" 1 616 "int8" `333 
f B "make32" 1 616 "int32(int8 var1,int16 var2,int8 var3)" `330 
f N "make32" 1 617 ""
v L "var1" 1 617 "int8" `335 
v L "var2" 1 617 "int8" `336 
v L "var3" 1 617 "int16" `337 
f B "make32" 1 617 "int32(int8 var1,int8 var2,int16 var3)" `334 
f N "bit_set" 1 618 ""
v L "var" 1 618 "int8" `339 
v L "bit" 1 618 "int8" `340 
f B "bit_set" 1 618 "void(int8 var,int8 bit)" `338 
f N "bit_set" 1 619 ""
v L "var" 1 619 "int16" `342 
v L "bit" 1 619 "int8" `343 
f B "bit_set" 1 619 "void(int16 var,int8 bit)" `341 
f N "bit_set" 1 620 ""
v L "var" 1 620 "int32" `345 
v L "bit" 1 620 "int8" `346 
f B "bit_set" 1 620 "void(int32 var,int8 bit)" `344 
f N "bit_clear" 1 621 ""
v L "var" 1 621 "int8" `348 
v L "bit" 1 621 "int8" `349 
f B "bit_clear" 1 621 "void(int8 var,int8 bit)" `347 
f N "bit_clear" 1 622 ""
v L "var" 1 622 "int16" `351 
v L "bit" 1 622 "int8" `352 
f B "bit_clear" 1 622 "void(int16 var,int8 bit)" `350 
f N "bit_clear" 1 623 ""
v L "var" 1 623 "int32" `354 
v L "bit" 1 623 "int8" `355 
f B "bit_clear" 1 623 "void(int32 var,int8 bit)" `353 
f N "bit_test" 1 624 ""
v L "var" 1 624 "int8" `357 
v L "bit" 1 624 "int8" `358 
f B "bit_test" 1 624 "int8(int8 var,int8 bit)" `356 
f N "bit_test" 1 625 ""
v L "var" 1 625 "int16" `360 
v L "bit" 1 625 "int8" `361 
f B "bit_test" 1 625 "int8(int16 var,int8 bit)" `359 
f N "bit_test" 1 626 ""
v L "var" 1 626 "int32" `363 
v L "bit" 1 626 "int8" `364 
f B "bit_test" 1 626 "int8(int32 var,int8 bit)" `362  "#use delay() Prototypes:"
f N "delay_cycles" 1 629 ""
v L "count" 1 629 "int8" `366 
f B "delay_cycles" 1 629 "void(int8 count)" `365 
f N "delay_ms" 1 630 ""
v L "time" 1 630 "int16" `368 
f B "delay_ms" 1 630 "void(int16 time)" `367 
f N "delay_us" 1 631 ""
v L "time" 1 631 "int16" `370 
f B "delay_us" 1 631 "void(int16 time)" `369  "#use rs232() Prototypes:"
f N "putchar" 1 634 ""
v L "cdata" 1 634 "int8" `372 
f B "putchar" 1 634 "void(int8 cdata)" `371 
f N "putchar" 1 635 ""
v L "cdata" 1 635 "int8" `374 
v L "stream" 1 635 "int8" `375 
f B "putchar" 1 635 "void(int8 cdata,int8 stream)" `373 
f N "puts" 1 636 ""
v L "string" 1 636 "*int8" `377 
f B "puts" 1 636 "void(*int8 string)" `376 
f N "puts" 1 637 ""
v L "string" 1 637 "*int8" `379 
v L "stream" 1 637 "int8" `380 
f B "puts" 1 637 "void(*int8 string,int8 stream)" `378 
f N "getch" 1 638 ""
f B "getch" 1 638 "int8()" `381 
f N "getch" 1 639 ""
v L "stream" 1 639 "int8" `383 
f B "getch" 1 639 "int8(int8 stream)" `382 
f N "gets" 1 640 ""
v L "string" 1 640 "*int8" `385 
f B "gets" 1 640 "void(*int8 string)" `384 
f N "gets" 1 641 ""
v L "string" 1 641 "*int8" `387 
v L "stream" 1 641 "int8" `388 
f B "gets" 1 641 "void(*int8 string,int8 stream)" `386 
f N "kbhit" 1 642 ""
f B "kbhit" 1 642 "int8()" `389 
f N "kbhit" 1 643 ""
v L "stream" 1 643 "int8" `391 
f B "kbhit" 1 643 "int8(int8 stream)" `390 
f N "printf" 1 644 ""
v L "string" 1 644 "*int8" `393 
f B "printf" 1 644 "void(*int8 string,*int8 _VA_LIST)" `392 
f N "fprintf" 1 645 ""
v L "stream" 1 645 "int8" `396 
v L "string" 1 645 "*int8" `397 
f B "fprintf" 1 645 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `395 
f N "putc_send" 1 646 ""
f B "putc_send" 1 646 "void()" `399 
f N "fputc_send" 1 647 ""
v L "stream" 1 647 "int8" `401 
f B "fputc_send" 1 647 "void(int8 stream)" `400 
f N "rcv_buffer_full" 1 648 ""
f B "rcv_buffer_full" 1 648 "int8()" `402 
f N "rcv_buffer_full" 1 649 ""
v L "stream" 1 649 "int8" `404 
f B "rcv_buffer_full" 1 649 "int8(int8 stream)" `403 
f N "rcv_buffer_bytes" 1 650 ""
f B "rcv_buffer_bytes" 1 650 "int16()" `405 
f N "rcv_buffer_bytes" 1 651 ""
v L "stream" 1 651 "int8" `407 
f B "rcv_buffer_bytes" 1 651 "int16(int8 stream)" `406 
f N "tx_buffer_full" 1 652 ""
f B "tx_buffer_full" 1 652 "int8()" `408 
f N "tx_buffer_full" 1 653 ""
v L "stream" 1 653 "int8" `410 
f B "tx_buffer_full" 1 653 "int8(int8 stream)" `409 
f N "tx_buffer_bytes" 1 654 ""
f B "tx_buffer_bytes" 1 654 "int16()" `411 
f N "tx_buffer_bytes" 1 655 ""
v L "stream" 1 655 "int8" `413 
f B "tx_buffer_bytes" 1 655 "int16(int8 stream)" `412  "#use i2c() Prototypes:"
f N "i2c_read" 1 658 ""
f B "i2c_read" 1 658 "int8()" `414 
f N "i2c_read" 1 659 ""
v L "stream" 1 659 "int8" `416 
f B "i2c_read" 1 659 "int8(int8 stream)" `415 
f N "i2c_read" 1 660 ""
v L "stream" 1 660 "int8" `418 
v L "ack" 1 660 "int8" `419 
f B "i2c_read" 1 660 "int8(int8 stream,int8 ack)" `417 
f N "i2c_write" 1 661 ""
v L "data" 1 661 "int8" `421 
f B "i2c_write" 1 661 "int8(int8 data)" `420 
f N "i2c_write" 1 662 ""
v L "stream" 1 662 "int8" `423 
v L "data" 1 662 "int8" `424 
f B "i2c_write" 1 662 "int8(int8 stream,int8 data)" `422 
f N "i2c_start" 1 663 ""
f B "i2c_start" 1 663 "void()" `425 
f N "i2c_start" 1 664 ""
v L "stream" 1 664 "int8" `427 
f B "i2c_start" 1 664 "void(int8 stream)" `426 
f N "i2c_start" 1 665 ""
v L "stream" 1 665 "int8" `429 
v L "restart" 1 665 "int8" `430 
f B "i2c_start" 1 665 "void(int8 stream,int8 restart)" `428 
f N "i2c_stop" 1 666 ""
f B "i2c_stop" 1 666 "void()" `431 
f N "i2c_stop" 1 667 ""
v L "stream" 1 667 "int8" `433 
f B "i2c_stop" 1 667 "void(int8 stream)" `432 
f N "i2c_isr_state" 1 668 ""
f B "i2c_isr_state" 1 668 "int8()" `434 
f N "i2c_slaveaddr" 1 669 ""
v L "addr" 1 669 "int8" `436 
f B "i2c_slaveaddr" 1 669 "void(int8 addr)" `435 
f N "i2c_slaveaddr" 1 670 ""
v L "stream" 1 670 "int8" `438 
v L "addr" 1 670 "int8" `439 
f B "i2c_slaveaddr" 1 670 "void(int8 stream,int8 addr)" `437 
f N "i2c_poll" 1 671 ""
f B "i2c_poll" 1 671 "int8()" `440 
f N "i2c_poll" 1 672 ""
v L "stream" 1 672 "int8" `442 
f B "i2c_poll" 1 672 "int8(int8 stream)" `441 
f N "i2c_init" 1 673 ""
v L "baud" 1 673 "int32" `444 
f B "i2c_init" 1 673 "void(int32 baud)" `443 
f N "i2c_init" 1 674 ""
v L "stream" 1 674 "int8" `446 
v L "baud" 1 674 "int32" `447 
f B "i2c_init" 1 674 "void(int8 stream,int32 baud)" `445  "#use spi() Prototypes:"
f N "spi_xfer" 1 677 ""
f B "spi_xfer" 1 677 "int8()" `448 
f N "spi_xfer" 1 678 ""
f G "spi_xfer" 1 678 "int16(int8 data)" `449 
f N "spi_xfer" 1 679 ""
f G "spi_xfer" 1 679 "int32(int8 data)" `449 
f N "spi_xfer" 1 680 ""
v L "data" 1 680 "int8" `450 
f B "spi_xfer" 1 680 "int8(int8 data)" `449 
f N "spi_xfer" 1 681 ""
v L "data" 1 681 "int16" `452 
f B "spi_xfer" 1 681 "int16(int16 data)" `451 
f N "spi_xfer" 1 682 ""
v L "data" 1 682 "int32" `454 
f B "spi_xfer" 1 682 "int32(int32 data)" `453 
f N "spi_xfer" 1 683 ""
v L "stream" 1 683 "int8" `456 
v L "data" 1 683 "int8" `457 
f B "spi_xfer" 1 683 "int8(int8 stream,int8 data)" `455 
f N "spi_xfer" 1 684 ""
v L "stream" 1 684 "int8" `459 
v L "data" 1 684 "int16" `460 
f B "spi_xfer" 1 684 "int16(int8 stream,int16 data)" `458 
f N "spi_xfer" 1 685 ""
v L "stream" 1 685 "int8" `462 
v L "data" 1 685 "int32" `463 
f B "spi_xfer" 1 685 "int32(int8 stream,int32 data)" `461 
f N "spi_xfer" 1 686 ""
v L "stream" 1 686 "int8" `465 
v L "data" 1 686 "int8" `466 
v L "bits" 1 686 "int8" `467 
f B "spi_xfer" 1 686 "int8(int8 stream,int8 data,int8 bits)" `464 
f N "spi_xfer" 1 687 ""
v L "stream" 1 687 "int8" `469 
v L "data" 1 687 "int16" `470 
v L "bits" 1 687 "int8" `471 
f B "spi_xfer" 1 687 "int16(int8 stream,int16 data,int8 bits)" `468 
f N "spi_xfer" 1 688 ""
v L "stream" 1 688 "int8" `473 
v L "data" 1 688 "int32" `474 
v L "bits" 1 688 "int8" `475 
f B "spi_xfer" 1 688 "int32(int8 stream,int32 data,int8 bits)" `472 
f N "spi_init" 1 689 ""
v L "baud" 1 689 "int32" `477 
f B "spi_init" 1 689 "void(int32 baud)" `476 
f N "spi_init" 1 690 ""
v L "stream" 1 690 "int8" `479 
v L "baud" 1 690 "int32" `480 
f B "spi_init" 1 690 "void(int8 stream,int32 baud)" `478 
f N "spi_speed" 1 691 ""
v L "baud" 1 691 "int32" `482 
f B "spi_speed" 1 691 "void(int32 baud)" `481 
f N "spi_speed" 1 692 ""
v L "stream" 1 692 "int8" `484 
v L "baud" 1 692 "int32" `485 
f B "spi_speed" 1 692 "void(int8 stream,int32 baud)" `483 
f N "spi_speed" 1 693 ""
v L "stream" 1 693 "int8" `487 
v L "baud" 1 693 "int32" `488 
v L "clock" 1 693 "int32" `489 
f B "spi_speed" 1 693 "void(int8 stream,int32 baud,int32 clock)" `486 
f N "spi_prewrite" 1 694 ""
v L "data" 1 694 "int8" `491 
f B "spi_prewrite" 1 694 "void(int8 data)" `490 
f N "spi_prewrite" 1 695 ""
v L "data" 1 695 "int16" `493 
f B "spi_prewrite" 1 695 "void(int16 data)" `492 
f N "spi_prewrite" 1 696 ""
v L "data" 1 696 "int32" `495 
f B "spi_prewrite" 1 696 "void(int32 data)" `494 
f N "spi_prewrite" 1 697 ""
v L "??65535" 1 697 "int8" `497 
v L "data" 1 697 "int8" `498 
f B "spi_prewrite" 1 697 "void(int8 ,int8 data)" `496 
f N "spi_prewrite" 1 698 ""
v L "??65535" 1 698 "int8" `500 
v L "data" 1 698 "int16" `501 
f B "spi_prewrite" 1 698 "void(int8 ,int16 data)" `499 
f N "spi_prewrite" 1 699 ""
v L "??65535" 1 699 "int8" `503 
v L "data" 1 699 "int32" `504 
f B "spi_prewrite" 1 699 "void(int8 ,int32 data)" `502 
f N "spi_xfer_in" 1 700 ""
f B "spi_xfer_in" 1 700 "int8()" `505 
f N "spi_xfer_in" 1 701 ""
f G "spi_xfer_in" 1 701 "int16(int8 bits)" `506 
f N "spi_xfer_in" 1 702 ""
f G "spi_xfer_in" 1 702 "int32(int8 bits)" `506 
f N "spi_xfer_in" 1 703 ""
v L "bits" 1 703 "int8" `507 
f B "spi_xfer_in" 1 703 "int8(int8 bits)" `506 
f N "spi_xfer_in" 1 704 ""
v L "bits" 1 704 "int8" `509 
f G "spi_xfer_in" 1 704 "int16(int8 bits,int8 bits)" `508 
f N "spi_xfer_in" 1 705 ""
v L "bits" 1 705 "int8" `509 
f G "spi_xfer_in" 1 705 "int32(int8 bits,int8 bits)" `508 
f N "spi_xfer_in" 1 706 ""
v L "stream" 1 706 "int8" `509 
v L "bits" 1 706 "int8" `510 
f B "spi_xfer_in" 1 706 "int8(int8 stream,int8 bits)" `508 
f N "spi_xfer_in" 1 707 ""
v L "stream" 1 707 "int8" `509 
v L "bits" 1 707 "int8" `513 
f G "spi_xfer_in" 1 707 "int16(int8 stream,int8 bits,int8 task)" `511 
f N "spi_xfer_in" 1 708 ""
v L "stream" 1 708 "int8" `509 
v L "bits" 1 708 "int8" `513 
f G "spi_xfer_in" 1 708 "int32(int8 stream,int8 bits,int8 task)" `511  "#use rtos() Prototypes:"
f N "rtos_run" 1 711 ""
f B "rtos_run" 1 711 "void(int8 stream,int8 bits,int8 task)" `511 
f N "rtos_yield" 1 712 ""
f B "rtos_yield" 1 712 "void(int8 bits,int8 task)" `512 
f N "rtos_enable" 1 713 ""
v L "task" 1 713 "int8" `514 
f B "rtos_enable" 1 713 "void(int8 task)" `513 
f N "rtos_disable" 1 714 ""
v L "task" 1 714 "int8" `516 
f B "rtos_disable" 1 714 "void(int8 task)" `515 
f N "rtos_terminate" 1 715 ""
f B "rtos_terminate" 1 715 "void()" `517 
f N "rtos_await" 1 716 ""
v L "flag" 1 716 "int8" `519 
f B "rtos_await" 1 716 "void(int8 flag)" `518 
f N "rtos_wait" 1 717 ""
v L "sem" 1 717 "int8" `521 
f B "rtos_wait" 1 717 "void(int8 sem)" `520 
f N "rtos_signal" 1 718 ""
v L "sem" 1 718 "int8" `523 
f B "rtos_signal" 1 718 "void(int8 sem)" `522 
f N "rtos_msg_send" 1 719 ""
v L "task" 1 719 "int8" `525 
v L "msg" 1 719 "int8" `526 
f B "rtos_msg_send" 1 719 "void(int8 task,int8 msg)" `524 
f N "rtos_msg_read" 1 720 ""
f B "rtos_msg_read" 1 720 "int8()" `527 
f N "rtos_msg_poll" 1 721 ""
f B "rtos_msg_poll" 1 721 "int8()" `528 
f N "rtos_overrun" 1 722 ""
v L "task" 1 722 "int8" `530 
f B "rtos_overrun" 1 722 "int8(int8 task)" `529 
f N "rtos_stats" 1 723 ""
v L "task" 1 723 "int8" `532 
v L "stat" 1 723 "*int8" `533 
f B "rtos_stats" 1 723 "void(int8 task,*int8 stat)" `531  "#use timer() Prototypes:"
f N "get_ticks" 1 726 ""
f B "get_ticks" 1 726 "int8()" `534 
f N "get_ticks" 1 727 ""
f G "get_ticks" 1 727 "int16(int8 stream)" `535 
f N "get_ticks" 1 728 ""
f G "get_ticks" 1 728 "int32(int8 stream)" `535 
f N "get_ticks" 1 729 ""
v L "stream" 1 729 "int8" `536 
f B "get_ticks" 1 729 "int8(int8 stream)" `535 
f N "get_ticks" 1 730 ""
v L "stream" 1 730 "int8" `538 
f G "get_ticks" 1 730 "int16(int8 stream)" `537 
f N "get_ticks" 1 731 ""
v L "stream" 1 731 "int8" `538 
f G "get_ticks" 1 731 "int32(int8 stream)" `537 
f N "set_ticks" 1 732 ""
v L "value" 1 732 "int8" `538 
f B "set_ticks" 1 732 "void(int8 value)" `537 
f N "set_ticks" 1 733 ""
v L "value" 1 733 "int16" `540 
f B "set_ticks" 1 733 "void(int16 value)" `539 
f N "set_ticks" 1 734 ""
v L "value" 1 734 "int32" `542 
f B "set_ticks" 1 734 "void(int32 value)" `541 
f N "set_ticks" 1 735 ""
v L "stream" 1 735 "int8" `544 
v L "value" 1 735 "int8" `545 
f B "set_ticks" 1 735 "void(int8 stream,int8 value)" `543 
f N "set_ticks" 1 736 ""
v L "stream" 1 736 "int8" `547 
v L "value" 1 736 "int16" `548 
f B "set_ticks" 1 736 "void(int8 stream,int16 value)" `546 
f N "set_ticks" 1 737 ""
v L "stream" 1 737 "int8" `550 
v L "value" 1 737 "int32" `551 
f B "set_ticks" 1 737 "void(int8 stream,int32 value)" `549  "#use pwm() Prototypes:"
f N "pwm_on" 1 740 ""
f B "pwm_on" 1 740 "void()" `552 
f N "pwm_on" 1 741 ""
v L "stream" 1 741 "int8" `554 
f B "pwm_on" 1 741 "void(int8 stream)" `553 
f N "pwm_off" 1 742 ""
f B "pwm_off" 1 742 "void()" `555 
f N "pwm_off" 1 743 ""
v L "stream" 1 743 "int8" `557 
f B "pwm_off" 1 743 "void(int8 stream)" `556 
f N "pwm_set_duty" 1 744 ""
v L "duty" 1 744 "int16" `559 
f B "pwm_set_duty" 1 744 "void(int16 duty)" `558 
f N "pwm_set_duty" 1 745 ""
v L "stream" 1 745 "int8" `561 
v L "duty" 1 745 "int16" `562 
f B "pwm_set_duty" 1 745 "void(int8 stream,int16 duty)" `560 
f N "pwm_set_duty_percent" 1 746 ""
v L "percent" 1 746 "int16" `564 
f B "pwm_set_duty_percent" 1 746 "void(int16 percent)" `563 
f N "pwm_set_duty_percent" 1 747 ""
v L "stream" 1 747 "int8" `566 
v L "percent" 1 747 "int16" `567 
f B "pwm_set_duty_percent" 1 747 "void(int8 stream,int16 percent)" `565 
f N "pwm_set_frequency" 1 748 ""
v L "frequency" 1 748 "int32" `569 
f B "pwm_set_frequency" 1 748 "void(int32 frequency)" `568 
f N "pwm_set_frequency" 1 749 ""
v L "stream" 1 749 "int8" `571 
v L "frequency" 1 749 "int32" `572 
f B "pwm_set_frequency" 1 749 "void(int8 stream,int32 frequency)" `570  "#use capture() Prototypes:"
f N "get_capture_time" 1 752 ""
f B "get_capture_time" 1 752 "int16()" `573 
f N "get_capture_time" 1 753 ""
v L "stream" 1 753 "int8" `575 
f B "get_capture_time" 1 753 "int16(int8 stream)" `574 
f N "get_capture_event" 1 754 ""
f B "get_capture_event" 1 754 "int8()" `576 
f N "get_capture_event" 1 755 ""
v L "stream" 1 755 "int8" `578 
f B "get_capture_event" 1 755 "int8(int8 stream)" `577  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 768 ""
v L "address" 1 768 "int16" `580 
f B "goto_address" 1 768 "void(int16 address)" `579 
f N "label_address" 1 769 ""
v L "label" 1 769 "int16" `582 
f B "label_address" 1 769 "int16(int16 label)" `581  "Program Memory Prototypes:"
f N "read_program_memory" 1 772 ""
v L "address" 1 772 "int16" `584 
v L "dataptr" 1 772 "*int8" `585 
v L "count" 1 772 "int16" `586 
f B "read_program_memory" 1 772 "void(int16 address,*int8 dataptr,int16 count)" `583 
f N "read_program_eeprom" 1 773 ""
v L "address" 1 773 "int16" `588 
f B "read_program_eeprom" 1 773 "int16(int16 address)" `587 
f N "erase_program_eeprom" 1 774 ""
v L "address" 1 774 "int16" `590 
f B "erase_program_eeprom" 1 774 "void(int16 address)" `589 
f N "write_program_memory" 1 775 ""
v L "address" 1 775 "int16" `592 
v L "dataptr" 1 775 "*int8" `593 
v L "count" 1 775 "int16" `594 
f B "write_program_memory" 1 775 "void(int16 address,*int8 dataptr,int16 count)" `591 
f N "write_program_eeprom" 1 776 ""
v L "address" 1 776 "int16" `596 
v L "data" 1 776 "int16" `597 
f B "write_program_eeprom" 1 776 "void(int16 address,int16 data)" `595  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 781 "int16" `598 
f N "read_eeprom" 1 786 ""
v L "address" 1 786 "__EEADDRESS__" `600 
f B "read_eeprom" 1 786 "int8(__EEADDRESS__ address)" `599 
f N "write_eeprom" 1 787 ""
v L "address" 1 787 "__EEADDRESS__" `602 
v L "value" 1 787 "int8" `603 
f B "write_eeprom" 1 787 "void(__EEADDRESS__ address,int8 value)" `601  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 794 ""
v L "interrupt" 1 794 "int32" `605 
f B "enable_interrupts" 1 794 "void(int32 interrupt)" `604 
f N "disable_interrupts" 1 795 ""
v L "interrupt" 1 795 "int32" `607 
f B "disable_interrupts" 1 795 "void(int32 interrupt)" `606 
f N "clear_interrupt" 1 796 ""
v L "interrupt" 1 796 "int32" `609 
f B "clear_interrupt" 1 796 "void(int32 interrupt)" `608 
f N "interrupt_active" 1 797 ""
v L "interrupt" 1 797 "int32" `611 
f B "interrupt_active" 1 797 "int8(int32 interrupt)" `610 
f N "interrupt_enabled" 1 798 ""
v L "interrupt" 1 798 "int32" `613 
f B "interrupt_enabled" 1 798 "int8(int32 interrupt)" `612 
f N "ext_int_edge" 1 799 ""
v L "source" 1 799 "int8" `615 
v L "edge" 1 799 "int8" `616 
f B "ext_int_edge" 1 799 "void(int8 source,int8 edge)" `614 
f N "jump_to_irs" 1 800 ""
v L "address" 1 800 "int16" `618 
f B "jump_to_irs" 1 800 "void(int16 address)" `617  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 802 "0x40"
d G "H_TO_L" 1 803 "0"
d G "GLOBAL" 1 805 "0xF2C0"
d G "PERIPH" 1 806 "0xF240"
d G "INT_RTCC" 1 807 "0x00F220"
d G "INT_TIMER0" 1 808 "0x00F220"
d G "INT_TIMER1" 1 809 "0x009D01"
d G "INT_TIMER2" 1 810 "0x009D02"
d G "INT_TIMER3" 1 811 "0x00A002"
d G "INT_EXT_L2H" 1 812 "0x5000F210"
d G "INT_EXT_H2L" 1 813 "0x6000F210"
d G "INT_EXT" 1 814 "0x00F210"
d G "INT_EXT1_L2H" 1 815 "0x5001F008"
d G "INT_EXT1_H2L" 1 816 "0x6001F008"
d G "INT_EXT1" 1 817 "0x00F008"
d G "INT_EXT2_L2H" 1 818 "0x5002F010"
d G "INT_EXT2_H2L" 1 819 "0x6002F010"
d G "INT_EXT2" 1 820 "0x00F010"
d G "INT_RB" 1 821 "0x00FFF208"
d G "INT_AD" 1 822 "0x009D40"
d G "INT_RDA" 1 823 "0x009D20"
d G "INT_TBE" 1 824 "0x009D10"
d G "INT_SSP" 1 825 "0x009D08"
d G "INT_CCP1" 1 826 "0x009D04"
d G "INT_CCP2" 1 827 "0x00A001"
d G "INT_BUSCOL" 1 828 "0x00A008"
d G "INT_LOWVOLT" 1 829 "0x00A004"
d G "INT_COMP" 1 830 "0x00A040"
d G "INT_EEPROM" 1 831 "0x00A010"
d G "INT_OSCF" 1 832 "0x00A080"
d G "INT_SPP" 1 833 "0x009D80"
d G "INT_USB" 1 834 "0x00A020"
D G "_STDLIB" 2 12 ""
D G "RAND_MAX" 2 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 25 "1"
T G "div_t" 2 33 "{sint8 quot,sint8 rem}" `622 
T G "ldiv_t" 2 38 "{sint16 quot,sint16 rem}" `626  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_irs" 2 43 2 "FUNCTION"
C L "jump_to_irs" 2 46 1 "*"
C L "jump_to_irs" 2 46 1 "*"
F N "atoi" 2 50 ""
V L "s" 2 50 "*int8" `628 
f G "atoi" 2 50 "sint8(*int8 s)" `627  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 58 ""
V L "s" 2 58 "*int8" `630 
f G "atoi32" 2 58 "sint32(*int8 s)" `629  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 46 2 "FUNCTION"
F N "itoa" 2 79 ""
V L "num" 2 79 "sint32" `632 
V L "base" 2 79 "int8" `633 
V L "s" 2 79 "*int8" `634 
f G "itoa" 2 79 "*int8(sint32 num,int8 base,*int8 s)" `631  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 81 1 "*"
C L "itoa" 2 81 1 "*"
F N "atol" 2 85 ""
V L "s" 2 85 "*int8" `636 
f G "atol" 2 85 "sint16(*int8 s)" `635  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
F N "strtol" 2 93 ""
V L "s" 2 93 "*int8" `638 
V L "endptr" 2 93 "*int8" `639 
V L "base" 2 93 "sint8" `640 
f G "strtol" 2 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `637  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
F N "strtoul" 2 101 ""
V L "s" 2 101 "*int8" `642 
V L "endptr" 2 101 "*int8" `643 
V L "base" 2 101 "sint8" `644 
f G "strtoul" 2 101 "int16(*int8 s,*int8 endptr,sint8 base)" `641  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 95 2 "FUNCTION"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
F N "strtof" 2 110 ""
V L "s" 2 110 "*int8" `646 
V L "endptr" 2 110 "*int8" `647 
f G "strtof" 2 110 "float(*int8 s,*int8 endptr)" `645  "provided for compatibility"
D G "strtof48" 2 116 "(s,e) strtof(s, e)"
D G "strtod" 2 117 "(s,e) strtof(s, e)"
C L "strtof" 2 103 1 "FUNCTION"
C L "strtof" 2 120 1 "*"
D G "atof" 2 124 "(s)   strtof(s, 0)"
C L "strtof" 2 120 1 "FUNCTION"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
F N "atoe" 2 149 ""
V L "s" 2 149 "*int8" `649 
f G "atoe" 2 149 "float(*int8 s)" `648  "Pseudo-random sequence generation functions"
C L "atoe" 2 143 1 "FUNCTION"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
F N "rand" 2 169 ""
f G "rand" 2 169 "int16()" `650  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
F N "srand" 2 191 ""
V L "seed" 2 191 "int32" `652 
f G "srand" 2 191 "void(int32 seed)" `651  "Memory management functions"
C L "srand" 2 171 3 "FUNCTION"
F N "system" 2 205 ""
V L "string" 2 205 "*int8" `654 
f G "system" 2 205 "sint8(*int8 string)" `653  "Searching and sorting utilities"
C L "system" 2 171 1 "FUNCTION"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 4 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
D G "labs" 2 249 "abs"
F N "div" 2 251 ""
V L "numer" 2 251 "sint8" `656 
V L "denom" 2 251 "sint8" `657 
f G "div" 2 251 "div_t(sint8 numer,sint8 denom)" `655 
F N "ldiv" 2 252 ""
V L "numer" 2 252 "sint16" `659 
V L "denom" 2 252 "sint16" `660 
f G "ldiv" 2 252 "ldiv_t(sint16 numer,sint16 denom)" `658  "Multibyte character functions"
C L "ldiv" 2 229 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*int8" `662 
V L "s2" 4 34 "*int8" `663 
V L "n" 4 34 "int16" `664 
F G "memmove" 4 35 "*int8(*int8 s1,*int8 s2,int16 n)" `661 
V L "sc1" 4 36 "*int8" `665 
V L "sc2" 4 37 "*int8" `666 
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `668 
V L "s2" 4 61 "*int8" `669 
V L "n" 4 61 "int16" `670 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n)" `667 
V L "s" 4 63 "*int8" `671 
C L "strcat" 4 19 3 "FUNCTION"
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `673 
V L "s2" 4 78 "*int8" `674 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `672 
V L "s" 4 80 "*int8" `675 
C L "strncat" 4 19 2 "FUNCTION"
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `677 
V L "s2" 4 96 "*int8" `678 
V L "n" 4 96 "int16" `679 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n)" `676 
V L "s" 4 98 "*int8" `680 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*int8" `682 
V L "s2" 4 120 "*int8" `683 
V L "n" 4 120 "int16" `684 
F G "memcmp" 4 121 "sint8(*int8 s1,*int8 s2,int16 n)" `681 
V L "su1" 4 122 "*int8" `685 
V L "su2" 4 122 "*int8" `686 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `688 
V L "s2" 4 134 "*int8" `689 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `687 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `691 
V L "s2" 4 144 "*int8" `692 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `690 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `694 
V L "s2" 4 157 "*int8" `695 
V L "n" 4 157 "int16" `696 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n)" `693 
C L "strxfrm" 4 19 3 "FUNCTION"
F N "strxfrm" 4 169 ""
V L "s1" 4 169 "*int8" `698 
V L "s2" 4 169 "*int8" `699 
V L "n" 4 169 "int16" `700 
F G "strxfrm" 4 170 "int16(*int8 s1,*int8 s2,int16 n)" `697 
V L "s" 4 171 "*int8" `701 
V L "n1" 4 172 "int8" `702 
C L "memchr" 4 19 3 "FUNCTION"
F N "memchr" 4 191 ""
V L "s" 4 191 "*int8" `704 
V L "c" 4 191 "int8" `705 
V L "n" 4 191 "int16" `706 
F G "memchr" 4 192 "*int8(*int8 s,int8 c,int16 n)" `703 
V L "uc" 4 193 "int8" `707 
V L "su" 4 194 "*int8" `708 
C L "strchr" 4 19 2 "FUNCTION"
F N "strchr" 4 205 ""
V L "s" 4 205 "*int8" `710 
V L "c" 4 205 "int8" `711 
F G "strchr" 4 206 "*int8(*int8 s,int8 c)" `709 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 217 ""
V L "s1" 4 217 "*int8" `713 
V L "s2" 4 217 "*int8" `714 
F G "strcspn" 4 218 "int8(*int8 s1,*int8 s2)" `712 
V L "sc1" 4 219 "*int8" `715 
V L "sc2" 4 219 "*int8" `716 
C L "strpbrk" 4 19 4 "FUNCTION"
F N "strpbrk" 4 232 ""
V L "s1" 4 232 "*int8" `718 
V L "s2" 4 232 "*int8" `719 
F G "strpbrk" 4 233 "*int8(*int8 s1,*int8 s2)" `717 
V L "sc1" 4 234 "*int8" `720 
V L "sc2" 4 234 "*int8" `721 
C L "strrchr" 4 19 2 "FUNCTION"
F N "strrchr" 4 247 ""
V L "s" 4 247 "*int8" `723 
V L "c" 4 247 "int8" `724 
F G "strrchr" 4 248 "*int8(*int8 s,int8 c)" `722 
V L "p" 4 249 "*int8" `725 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 262 ""
V L "s1" 4 262 "*int8" `727 
V L "s2" 4 262 "*int8" `728 
F G "strspn" 4 263 "int8(*int8 s1,*int8 s2)" `726 
V L "sc1" 4 264 "*int8" `729 
V L "sc2" 4 264 "*int8" `730 
C L "strstr" 4 19 6 "FUNCTION"
F N "strstr" 4 281 ""
V L "s1" 4 281 "*int8" `732 
V L "s2" 4 281 "*int8" `733 
F G "strstr" 4 282 "*int8(*int8 s1,*int8 s2)" `731 
V L "s" 4 283 "*int8" `734 
V L "t" 4 283 "*int8" `735 
C L "strtok" 4 19 13 "FUNCTION"
F N "strtok" 4 320 ""
V L "s1" 4 320 "*int8" `737 
V L "s2" 4 320 "*int8" `738 
F G "strtok" 4 321 "*int8(*int8 s1,*int8 s2)" `736 
V L "beg" 4 322 "*int8" `739 
V L "end" 4 322 "*int8" `740 
V L "save" 4 323 "*int8" `741 
C L "strlen" 4 19 6 "FUNCTION"
F N "strlen" 4 369 ""
V L "s" 4 369 "*int8" `743 
F G "strlen" 4 370 "int8(*int8 s)" `742 
V L "sc" 4 371 "*int8" `744 
C L "stricmp" 4 19 2 "FUNCTION"
F N "stricmp" 4 380 ""
V L "s1" 4 380 "*int8" `746 
V L "s2" 4 380 "*int8" `747 
F G "stricmp" 4 381 "sint8(*int8 s1,*int8 s2)" `745 
C L "strlwr" 4 19 3 "FUNCTION"
F N "strlwr" 4 394 ""
V L "s" 4 394 "*int8" `751 
F G "strlwr" 4 395 "*int8(*int8 s)" `750 
V L "p" 4 396 "*int8" `752 
C L "strupr" 4 19 3 "FUNCTION"
F N "strupr" 4 408 ""
V L "s" 4 408 "*int8" `754 
F G "strupr" 4 409 "*int8(*int8 s)" `753 
V L "p" 4 410 "*int8" `755 
F N "div" 2 274 ""
V L "numer" 2 274 "sint8" `656 
V L "denom" 2 274 "sint8" `758 
F G "div" 2 275 "div_t(sint8 numer,sint8 denom)" `655 
V L "val" 2 276 "div_t" `756 
F N "ldiv" 2 282 ""
V L "numer" 2 282 "sint16" `659 
V L "denom" 2 282 "sint16" `765 
F G "ldiv" 2 283 "ldiv_t(sint16 numer,sint16 denom)" `658 
V L "val" 2 284 "ldiv_t" `763 
F N "atoe" 2 361 ""
V L "s" 2 361 "*int8" `771 
F G "atoe" 2 362 "float(*int8 s)" `648 
V L "pow10" 2 363 "float" `770 
V L "result" 2 364 "float" `771 
V L "sign" 2 365 "int8" `772 
V L "expsign" 2 366 "int8" `773 
V L "c" 2 367 "int8" `774 
V L "ptr" 2 368 "int8" `775 
V L "i" 2 369 "int8" `776 
V L "exp" 2 370 "float" `777 
V L "expcnt" 2 371 "int8" `778 
C L "atoe" 2 397 1 "FUNCTION"
F N "atoi" 2 429 ""
V L "s" 2 429 "*int8" `791 
F G "atoi" 2 430 "sint8(*int8 s)" `627 
V L "result" 2 431 "sint8" `790 
V L "sign" 2 432 "int8" `791 
V L "base" 2 432 "int8" `792 
V L "index" 2 432 "int8" `793 
V L "c" 2 433 "int8" `794 
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
F N "atol" 2 498 ""
V L "s" 2 498 "*int8" `796 
F G "atol" 2 499 "sint16(*int8 s)" `635 
V L "result" 2 500 "sint16" `795 
V L "sign" 2 501 "int8" `796 
V L "base" 2 501 "int8" `797 
V L "index" 2 501 "int8" `798 
V L "c" 2 502 "int8" `799 
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "mult_with10" 2 397 1 "FUNCTION"
F N "mult_with10" 2 565 ""
V L "num" 2 565 "int32" `801 
F G "mult_with10" 2 566 "sint32(int32 num)" `800 
F N "atoi32" 2 571 ""
V L "s" 2 571 "*int8" `803 
F G "atoi32" 2 572 "sint32(*int8 s)" `629 
V L "result" 2 573 "sint32" `802 
V L "sign" 2 574 "int8" `803 
V L "base" 2 574 "int8" `804 
V L "index" 2 574 "int8" `805 
V L "c" 2 575 "int8" `806 
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
F N "itoa" 2 770 ""
V L "num" 2 770 "sint32" `632 
V L "base" 2 770 "int8" `633 
V L "s" 2 770 "*int8" `810 
F G "itoa" 2 771 "*int8(sint32 num,int8 base,*int8 s)" `631 
V L "temp" 2 772 "int32" `807 
V L "i" 2 773 "int8" `808 
V L "sign" 2 773 "int8" `809 
V L "cnt" 2 773 "int8" `810 
V L "c" 2 774 "int8" `811 
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
F N "strtof" 2 885 ""
V L "s" 2 885 "*int8" `646 
V L "endptr" 2 885 "*int8" `820 
F G "strtof" 2 886 "float(*int8 s,*int8 endptr)" `645 
V L "pow10" 2 887 "float" `818 
V L "result" 2 888 "float" `819 
V L "skip" 2 889 "int1" `820 
V L "sign" 2 889 "int1" `821 
V L "point" 2 889 "int1" `822 
V L "c" 2 890 "int8" `823 
V L "ptr" 2 891 "int8" `824 
F N "strtoul" 2 1103 ""
V L "s" 2 1103 "*int8" `642 
V L "endptr" 2 1103 "*int8" `643 
V L "base" 2 1103 "sint8" `829 
F G "strtoul" 2 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `641 
V L "sc" 2 1105 "*int8" `826 
V L "s1" 2 1105 "*int8" `827 
V L "sd" 2 1105 "*int8" `828 
V L "x" 2 1106 "int16" `829 
V L "sign" 2 1107 "int8" `830 
V L "digits" 2 1108 "int8[1]" `831 
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
F N "strtol" 2 1165 ""
V L "s" 2 1165 "*int8" `638 
V L "endptr" 2 1165 "*int8" `639 
V L "base" 2 1165 "sint8" `836 
F G "strtol" 2 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `637 
V L "sc" 2 1167 "*int8" `833 
V L "s1" 2 1167 "*int8" `834 
V L "sd" 2 1167 "*int8" `835 
V L "x" 2 1168 "sint16" `836 
V L "sign" 2 1169 "int8" `837 
V L "digits" 2 1170 "int8[1]" `838 
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
F N "system" 2 1228 ""
V L "string" 2 1228 "*int8" `841 
F G "system" 2 1229 "sint8(*int8 string)" `653 
F N "mblen" 2 1233 ""
V L "s" 2 1233 "*int8" `841 
V L "n" 2 1233 "int16" `842 
F G "mblen" 2 1234 "int8(*int8 s,int16 n)" `840 
F N "mbtowc" 2 1238 ""
V L "pwc" 2 1238 "*int8" `844 
V L "s" 2 1238 "*int8" `845 
V L "n" 2 1238 "int16" `846 
F G "mbtowc" 2 1239 "int8(*int8 pwc,*int8 s,int16 n)" `843 
F N "wctomb" 2 1244 ""
V L "s" 2 1244 "*int8" `848 
V L "wchar" 2 1244 "int8" `849 
F G "wctomb" 2 1245 "int8(*int8 s,int8 wchar)" `847 
F N "mbstowcs" 2 1250 ""
V L "pwcs" 2 1250 "*int8" `851 
V L "s" 2 1250 "*int8" `852 
V L "n" 2 1250 "int16" `853 
F G "mbstowcs" 2 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `850 
F N "wcstombs" 2 1256 ""
V L "s" 2 1256 "*int8" `855 
V L "pwcs" 2 1256 "*int8" `856 
V L "n" 2 1256 "int16" `857 
F G "wcstombs" 2 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `854 
V G "_Randseed" 2 1266 "int32" `858 
F N "rand" 2 1268 ""
F G "rand" 2 1269 "int16()" `650 
F N "srand" 2 1274 ""
V L "seed" 2 1274 "int32" `863 
F G "srand" 2 1275 "void(int32 seed)" `651 
F N "*_Cmpfun" 2 1284 ""
V L "p1" 2 1284 "*int8" `863 
V L "p2" 2 1284 "*int8" `864 
T G "*_Cmpfun" 2 1284 "sint8(*int8 p1,*int8 p2)" `862 
F N "qsort" 2 1291 ""
V L "qdata" 2 1291 "*int8" `867 
V L "qitems" 2 1291 "int8" `868 
V L "qsize" 2 1291 "int8" `869 
V L "cmp" 2 1291 "_Cmpfun" `870 
F G "qsort" 2 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `866 
V L "m" 2 1292 "int8" `871 
V L "j" 2 1292 "int8" `872 
V L "i" 2 1292 "int8" `873 
V L "l" 2 1292 "int8" `874 
V L "done" 2 1293 "int1" `875 
V L "t" 2 1294 "int8[16]" `876 
F N "bsearch" 2 1319 ""
V L "key" 2 1319 "*int8" `879 
V L "base" 2 1319 "*int8" `880 
V L "num" 2 1319 "int16" `881 
V L "width" 2 1319 "int16" `882 
V L "cmp" 2 1319 "_Cmpfun" `883 
F G "bsearch" 2 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `878 
V L "p" 2 1321 "*int8" `884 
V L "q" 2 1321 "*int8" `885 
V L "n" 2 1322 "int16" `886 
V L "pivot" 2 1323 "int16" `887 
V L "val" 2 1324 "sint8" `888 
C L "bsearch" 2 397 1 "FUNCTION"
V G "lcd" 6 48 "{int4 data,int1 enable,int1 rw,int1 rs,int1 unused}" `902  "be pin B0."
D G "set_tris_lcd" 6 67 "(x) set_tris_d(x)"
D G "lcd_type" 6 71 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "lcd_line_two" 6 74 "0x40" "LCD RAM address for the second line"
V G "LCD_INIT_STRING" 6 77 "[4]" `904 
V G "LCD_WRITE" 6 85 "{int4 data,int1 enable,int1 rw,int1 rs,int1 unused}" `906 
V G "LCD_READ" 6 86 "{int4 data,int1 enable,int1 rw,int1 rs,int1 unused}" `908 
C L "lcd_read_byte" 6 2 1 "FUNCTION"
F N "lcd_read_byte" 6 90 ""
F G "lcd_read_byte" 6 90 "int8()" `910 
V L "low" 6 91 "int8" `911 
V L "high" 6 91 "int8" `912 
F N "lcd_send_nibble" 6 109 ""
V L "n" 6 109 "int8" `914 
F G "lcd_send_nibble" 6 109 "void(int8 n)" `913 
F N "lcd_send_byte" 6 118 ""
V L "address" 6 118 "int8" `916 
V L "n" 6 118 "int8" `917 
F G "lcd_send_byte" 6 118 "void(int8 address,int8 n)" `915 
F N "lcd_init" 6 132 ""
F G "lcd_init" 6 132 "void()" `918 
V L "i" 6 133 "int8" `919 
F N "lcd_gotoxy" 6 149 ""
V L "x" 6 149 "int8" `921 
V L "y" 6 149 "int8" `922 
F G "lcd_gotoxy" 6 149 "void(int8 x,int8 y)" `920 
V L "address" 6 150 "int8" `923 
F N "lcd_putc" 6 160 ""
V L "c" 6 160 "int8" `925 
F G "lcd_putc" 6 160 "void(int8 c)" `924 
F N "lcd_getc" 6 171 ""
V L "x" 6 171 "int8" `927 
V L "y" 6 171 "int8" `928 
F G "lcd_getc" 6 171 "int8(int8 x,int8 y)" `926 
V L "value" 6 172 "int8" `929 
C L "lcd_getc" 6 2 1 "FUNCTION"
D G "WATER_SENSOR_PIN" 0 7 "PIN_C0"
D G "LED_PIN" 0 8 "PIN_C1"
V G "flow_count" 0 10 "int16" `930 
V G "flow_rate" 0 11 "float" `931 
F N "ext_isr" 0 14 ""
F G "ext_isr" 0 14 "void()" `932 
C L "ext_isr" 0 16 1 "FUNCTION"
F N "main" 0 22 ""
F G "main" 0 22 "void()" `933 
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
C L "main" 0 16 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_HIGH" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
